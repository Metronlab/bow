package bow

import (
    "fmt"

	"github.com/apache/arrow/go/v8/arrow/array"
	"github.com/apache/arrow/go/v8/arrow/bitutil"
)

// NewBuffer returns a new Buffer of size `size` and Type `typ`.
func NewBuffer(size int, typ Type) Buffer {
	buf := Buffer{nullBitmapBytes: make([]byte, bitutil.CeilByte(size)/8)}
	switch typ {
    {{range .Data.types -}}
	case {{ .Type }}:
		buf.Data = make([]{{ .type }}, size)
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%s'", typ))
	}
	return buf
}

// NewBufferFromData returns from `data`, which has to be a slice of a supported type.
func NewBufferFromData(data interface{}) Buffer {
	var l int
	switch data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%T'", data))
	}
	return Buffer{
		Data: data,
		nullBitmapBytes: buildNullBitmapBytes(l, nil),
	}
}

// Len returns the length of the Buffer
func (b Buffer) Len() int {
	switch data := b.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		return len(data)
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%T'", b.Data))
	}
}

// SetOrDrop sets the value `value` at index `i` by attempting a type conversion to the Buffer Type.
// Set the bit in the Buffer nullBitmapBytes if the conversion succeeded, or clear it otherwise.
func (b *Buffer) SetOrDrop(i int, value interface{}) {
	var valid bool
	switch v := b.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		v[i], valid = {{ .Type }}.Convert(value).({{ .type }})
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%T'", v))
	}

	if valid {
		bitutil.SetBit(b.nullBitmapBytes, i)
	} else {
		bitutil.ClearBit(b.nullBitmapBytes, i)
	}
}

// SetOrDrop sets the value `value` at index `i` by attempting a type assertion to the Buffer Type.
// Set the bit in the Buffer nullBitmapBytes if the type assertion succeeded, or clear it otherwise.
func (b *Buffer) SetOrDropStrict(i int, value interface{}) {
	var valid bool
	switch v := b.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		v[i], valid = value.({{ .type }})
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%T'", v))
	}

	if valid {
		bitutil.SetBit(b.nullBitmapBytes, i)
	} else {
		bitutil.ClearBit(b.nullBitmapBytes, i)
	}
}

// GetValue gets the value at index `i` from the Buffer
func (b *Buffer) GetValue(i int) interface{} {
	if bitutil.BitIsNotSet(b.nullBitmapBytes, i) {
		return nil
	}
	switch v := b.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		return v[i]
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%T'", v))
	}
}

// Less returns whether the value at index `i` is less that the value at index `j`.
func (b Buffer) Less(i, j int) bool {
	switch v := b.Data.(type) {
    {{range .Data.types -}}
    {{if .comparable -}}
	case []{{ .type }}:
		return v[i] < v[j]
    {{end -}}
    {{end -}}
    case []bool:
        return !v[i] && v[j]
	default:
		panic(fmt.Errorf("unsupported type '%T'", v))
	}
}

// NewBufferFromCol returns a new Buffer created from the column at index `colIndex`.
func (b *bow) NewBufferFromCol(colIndex int) Buffer {
	data := b.Column(colIndex).Data()
	switch b.ColumnType(colIndex) {
    {{range .Data.types -}}
	case {{ .Type }}:
		arr := array.New{{ .Type }}Data(data)
		nullBitmapBytes := arr.NullBitmapBytes()[:bitutil.CeilByte(arr.Data().Len())/8]
		nullBitmapBytesCopy := make([]byte, len(nullBitmapBytes))
		copy(nullBitmapBytesCopy, nullBitmapBytes)
		return Buffer{
			Data:            {{ .Type }}Values(arr),
			nullBitmapBytes: nullBitmapBytesCopy,
		}
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%s'", b.ColumnType(colIndex)))
	}
}
