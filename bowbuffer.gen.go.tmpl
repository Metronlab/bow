package bow

import (
    "fmt"

	"github.com/apache/arrow/go/arrow/array"
	"github.com/apache/arrow/go/arrow/bitutil"
)

type Buffer struct {
	Data            interface{}
	nullBitmapBytes []byte
}

func NewBuffer(size int, typ Type) Buffer {
	switch typ {
    {{range .Data.types -}}
	case {{ .Type }}:
		return Buffer{
			Data: make([]{{ .type }}, size),
			nullBitmapBytes: make([]byte, bitutil.CeilByte(size) / 8),
		}
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type %s", typ))
	}
}

func NewBufferFromData(dataArray interface{}, validityArray interface{}) Buffer {
	switch data := dataArray.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		return Buffer{
			Data:            dataArray,
			nullBitmapBytes: buildNullBitmapBytes(len(data), validityArray),
		}
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type %T", dataArray))
	}
}

func buildNullBitmapBytes(dataLength int, validityArray interface{}) []byte {
	var res []byte
	nullBitmapLength := bitutil.CeilByte(dataLength) / 8

	switch valid := validityArray.(type) {
	case nil:
		res = make([]byte, nullBitmapLength)
		for i := 0; i < dataLength; i++ {
			bitutil.SetBit(res, i)
		}
	case []bool:
		if len(valid) != dataLength {
			panic(fmt.Errorf("dataArray and validityArray have different lengths"))
		}
		res = make([]byte, nullBitmapLength)
		for i := 0; i < dataLength; i++ {
			if valid[i] {
				bitutil.SetBit(res, i)
			}
		}
	case []byte:
		if len(valid) != nullBitmapLength {
			panic(fmt.Errorf("dataArray and validityArray have different lengths"))
		}
		return valid
	default:
		panic(fmt.Errorf("unsupported type %T", valid))
	}

	return res
}

func NewBufferFromInterfaces(typ Type, cells []interface{}) (Buffer, error) {
	buf := NewBuffer(len(cells), typ)
	for i, c := range cells {
		buf.SetOrDrop(i, c)
	}
	return buf, nil
}

func (b *Buffer) Len() int {
	switch data := b.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		return len(data)
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%T'", b.Data))
	}
}

func (b *Buffer) SetOrDrop(i int, value interface{}) {
	var valid bool
	switch v := b.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		v[i], valid = {{ .Type }}.Convert(value).({{ .type }})
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type %T", v))
	}

	if valid {
		bitutil.SetBit(b.nullBitmapBytes, i)
	} else {
		bitutil.ClearBit(b.nullBitmapBytes, i)
	}
}

func (b *Buffer) IsValid(rowIndex int) bool {
	return bitutil.BitIsSet(b.nullBitmapBytes, rowIndex)
}

func (b *Buffer) IsNull(rowIndex int) bool {
	return bitutil.BitIsNotSet(b.nullBitmapBytes, rowIndex)
}

func (b *Buffer) GetValue(i int) interface{} {
	if bitutil.BitIsNotSet(b.nullBitmapBytes, i) {
		return nil
	}
	switch v := b.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		return v[i]
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type %T", v))
	}
}

func (b *bow) NewBufferFromCol(colIndex int) Buffer {
	data := b.Column(colIndex).Data()
	switch b.ColumnType(colIndex) {
    {{range .Data.types -}}
	case {{ .Type }}:
		arr := array.New{{ .Type }}Data(data)
		return Buffer{
			Data:            {{ .Type }}Values(arr),
			nullBitmapBytes: arr.NullBitmapBytes(),
		}
    {{end -}}
	default:
		panic(fmt.Errorf(
			"unsupported type %+v", b.ColumnType(colIndex)))
	}
}

func Int64Values(arr *array.Int64) []int64 {
	return arr.Int64Values()
}

func Float64Values(arr *array.Float64) []float64 {
	return arr.Float64Values()
}

func BooleanValues(arr *array.Boolean) []bool {
	var res = make([]bool, arr.Len())
	for i := range res {
		res[i] = arr.Value(i)
	}
	return res
}

func StringValues(arr *array.String) []string {
	var res = make([]string, arr.Len())
	for i := range res {
		res[i] = arr.Value(i)
	}
	return res
}