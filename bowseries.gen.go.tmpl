package bow

import (
	"fmt"
    "github.com/apache/arrow/go/v8/arrow"
    "github.com/apache/arrow/go/v8/arrow/array"
    "github.com/apache/arrow/go/v8/arrow/bitutil"
    "github.com/apache/arrow/go/v8/arrow/memory"
)

func NewSeries(name string, dataArray interface{}, validityArray interface{}) Series {
	switch v := dataArray.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		return new{{ .Type }}Series(name, v, buildNullBitmapBytes(len(v), validityArray))
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type %T", v))
	}
}

func NewSeriesFromBuffer(name string, buf Buffer) Series {
	switch data := buf.Data.(type) {
    {{range .Data.types -}}
	case []{{ .type }}:
		return new{{ .Type }}Series(name, data, buf.nullBitmapBytes)
    {{end -}}
	default:
		panic(fmt.Errorf("unsupported type '%T'", buf.Data))
	}
}

func NewSeriesFromInterfaces(name string, typ Type, cells []interface{}) Series {
	if typ == Unknown {
		var err error
		if typ, err = seekType(cells); err != nil {
			panic(err)
		}
	}
    mem := memory.NewCheckedAllocator(memory.NewGoAllocator())
	switch typ {
    {{range .Data.types -}}
	case {{ .Type }}:
		builder := array.New{{ .Type }}Builder(mem)
		defer builder.Release()
		builder.Resize(len(cells))
		for i := 0; i < len(cells); i++ {
			v, ok := To{{ .Type }}(cells[i])
			if !ok {
				builder.AppendNull()
				continue
			}
            builder.Append(v)
		}
		return Series{Name: name, Array: builder.NewArray()}
    {{end -}}
	default:
		panic(fmt.Errorf("unhandled type %s", typ))
	}
}

{{range .Data.types -}}
func new{{ .Type }}Series(name string, data []{{ .type }}, valid []byte) Series {
    {{ if .bufferMemoryMappingEqualArrow -}}
	length := len(data)
	return Series{
		Name: name,
		Array: array.New{{ .Type }}Data(
			array.NewData(mapBowToArrowTypes[{{ .Type }}], length,
				[]*memory.Buffer{
					memory.NewBufferBytes(valid),
					memory.NewBufferBytes(arrow.{{ .Type }}Traits.CastToBytes(data)),
				}, nil, length-bitutil.CountSetBits(valid, 0, length), 0),
		),
	}
	{{ else -}}
    mem := memory.NewCheckedAllocator(memory.NewGoAllocator())
    builder := array.New{{ .Type }}Builder(mem)
    defer builder.Release()
    builder.AppendValues(data, buildNullBitmapBool(len(data), valid))
    return Series{Name: name, Array: builder.NewArray()}
	{{ end -}}
}

{{end -}}